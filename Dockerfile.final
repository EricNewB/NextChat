# 使用 Daocloud 公共镜像源，稳定且无需授权
FROM docker.m.daocloud.io/library/node:18-alpine AS base

# --- 诊断阶段 ---
# 这个阶段的唯一目的是检查阿里云构建服务提供的构建上下文
FROM base AS diagnostic
WORKDIR /context
# 将整个构建上下文复制到此目录中
COPY . .
# 递归列出所有内容。我们需要的正是这个命令的输出日志。
# 这个命令执行后，构建会停止，但我们能从日志中看到文件系统的确切结构。
RUN ls -laR .
# --- 诊断阶段结束 ---


FROM base AS deps

# 设置 Alpine 包管理器使用阿里云镜像源
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories

RUN apk add --no-cache libc6-compat

WORKDIR /app

# 从 NextChat/ 目录复制关键文件
COPY NextChat/package.json NextChat/yarn.lock ./

# 使用阿里云 npm 镜像源加速依赖安装
RUN yarn config set registry 'https://registry.npmmirror.com/'
RUN yarn install

FROM base AS builder

# 设置 Alpine 包管理器使用阿里云镜像源
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories

RUN apk update && apk add --no-cache git

ENV OPENAI_API_KEY=""
ENV GOOGLE_API_KEY=""
ENV CODE=""

WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
# 从 NextChat/ 目录复制所有源代码
COPY NextChat/ .

RUN yarn build

FROM base AS runner
WORKDIR /app

# 设置 Alpine 包管理器使用阿里云镜像源
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g' /etc/apk/repositories

RUN apk add proxychains-ng

ENV PROXY_URL=""
ENV OPENAI_API_KEY=""
ENV GOOGLE_API_KEY=""
ENV CODE=""
ENV ENABLE_MCP=""

# 从构建器中复制构建好的产物，注意路径
COPY --from=builder /app/public ./public
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static
COPY --from=builder /app/.next/server ./.next/server

# MCP 相关的路径也需要正确
RUN mkdir -p /app/app/mcp && chmod 777 /app/app/mcp
COPY --from=builder /app/app/mcp/mcp_config.default.json /app/app/mcp/mcp_config.json

EXPOSE 3000

CMD if [ -n "$PROXY_URL" ]; then \
    export HOSTNAME="0.0.0.0"; \
    protocol=$(echo $PROXY_URL | cut -d: -f1); \
    host=$(echo $PROXY_URL | cut -d/ -f3 | cut -d: -f1); \
    port=$(echo $PROXY_URL | cut -d: -f3); \
    conf=/etc/proxychains.conf; \
    echo "strict_chain" > $conf; \
    echo "proxy_dns" >> $conf; \
    echo "remote_dns_subnet 224" >> $conf; \
    echo "tcp_read_time_out 15000" >> $conf; \
    echo "tcp_connect_time_out 8000" >> $conf; \
    echo "localnet 127.0.0.0/255.0.0.0" >> $conf; \
    echo "localnet ::1/128" >> $conf; \
    echo "[ProxyList]" >> $conf; \
    echo "$protocol $host $port" >> $conf; \
    cat /etc/proxychains.conf; \
    proxychains -f $conf node server.js; \
    else \
    node server.js; \
    fi